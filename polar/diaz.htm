<!DOCTYPE html>
<meta charset="utf-8">

<html>
  <head>
    <title>Life in Antarctic soils</title>
    <style format="text/css">
      body {
        font-family: Verdana, Geneva, Tahoma, sans-serif;
        font-size: 16px;
      }
      h3 {
        margin: 0px;
        color: #494949;
      }
      small {
        color: #808080;
      }
    </style>
  </head>

  <body>
    <h3>Life in Antarctic soils</h3>
    <!-- Create a div where the graph will take place -->
    <div id="my_dataviz"></div>
    
    <!-- Initialize a select button -->
    <p>Vertical Axis: <select id="yButton"></select></p>
    <p>Horizontal Axis: <select id="xButton"></select></p>

    <p><small><em>Data for this visualization was provided by Melisa Diaz, and was created to support her Polar Literacy activity.</em></small></p>
    <p><small>&copy; 2020 Rutgers University <a href="https://polar-ice.org">Polar Literacy Project</a></small></p>
  </body>

<!-- Load d3.js -->
<script src="https://d3js.org/d3.v4.js"></script>
<script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>

<script>
// Written by Sage Lichtenwalner, 7/22/2020
// Adapted partially from https://www.d3-graph-gallery.com/graph/connectedscatter_select.html

// set the dimensions and margins of the graph
var margin = {top: 10, right: 150, bottom: 60, left: 70},
    width = 750 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;

// append the svg object to the body of the page
var svg = d3.select("#my_dataviz")
  .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")")

// Add the grey background that makes ggplot2 famous
svg.append("rect")
    .attr("x",0)
    .attr("y",0)
    .attr("height", height)
    .attr("width", width)
    .style("fill", "EBEBEB")

// Specify data columns to use
var xOptions = ["Scottnema lindsayae (# organisms)","Eudorylaimus sp. (# organisms)","Distance from glacier (m)"]
var yOptions = ["Soil moisture (%)","N:P ratio (molar)","Total salt (microg/g)","Latitude"]

var xDefault = "Scottnema lindsayae (# organisms)"
var yDefault = "N:P ratio (molar)"

// Add the options to the pulldowns
d3.select("#xButton")
   .selectAll('myOptions')
 	.data(xOptions)
  .enter()
	  .append('option')
    .text(function (d) { return d; })
    .attr("value", function (d) { return d; })
  .property("selected", function(d){ return d === xDefault; })
  
d3.select("#yButton")
   .selectAll('myOptions')
 	.data(yOptions)
  .enter()
	  .append('option')
    .text(function (d) { return d; })
    .attr("value", function (d) { return d; })
  .property("selected", function(d){ return d === yDefault; })

// Specify Color Categories
var categories = ['Bennett','Thanksgiving','Roberts','Speed' ]

// Setup color scale
var color = d3.scaleOrdinal()
  .domain(categories)
  .range(d3.schemeSet2)

// Add Legend
svg.append("text")
  .attr("x", width + 13)
  .attr("y", margin.top)
  .text('Sampling site')
  .attr("text-anchor", "left")
  .style("alignment-baseline", "middle")
  .style('font-weight','bold')
svg.selectAll("legendDots")
  .data(categories)
  .enter()
  .append("circle")
    .attr("cx", width + 20)
    .attr("cy", function(d,i){ return margin.top + 25 + i*25})
    .attr("r", 7)
    .style("fill", function(d){ return color(d)})
svg.selectAll("legendLabels")
  .data(categories)
  .enter()
  .append("text")
    .attr("x", width + 35)
    .attr("y", function(d,i){ return margin.top + 25 + i*25})
    .style("fill", function(d){ return color(d)})
    .text(function(d){ return d})
    .attr("text-anchor", "left")
    .style("alignment-baseline", "middle")

//Read the data
d3.csv("diaz.csv", function(data) {
  
  // Set the ranges
  var x = d3.scaleLinear()
    .domain(d3.extent(data, function(d) { return +d[xDefault]; }))
    .range([ 0, width ])
    .nice()
  var y = d3.scaleLinear()
    .domain(d3.extent(data, function(d) { return +d[yDefault]; }))
    .range([ height, 0])
    .nice()

  // Add the axes    
  var xAxis = svg.append("g")
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x))
  var yAxis = svg.append("g")
    .call(d3.axisLeft(y))

  // Add labels
  xLabel = svg.append("text")
      .attr("text-anchor", "end")
      .attr("x", width)
      .attr("y", height + margin.top + 30)
      .text(xDefault);
  yLabel = svg.append("text")
      .attr("text-anchor", "end")
      .attr("transform", "rotate(-90)")
      .attr("y", -margin.left + 20)
      .attr("x", -margin.top)
      .text(yDefault)

  // Add dots
  var dots = svg
    .selectAll("dot")
    .data(data)
    .enter()
    .append("circle")
      .attr("cx", function (d) { return x(+d[xDefault]); } )
      .attr("cy", function (d) { return y(+d[yDefault]); } )
      .attr("r", 7)
      .style("fill", function (d) { return color(d.Location) } )
      .style('stroke','grey')
      .attr('class','datadot')

  function update() {
    
    // Retrieve selected columns
    var selectedOptionX = d3.select('#xButton').property("value")
    var selectedOptionY = d3.select('#yButton').property("value")

    // Select new variables to plot
    var dataFilter = data.map(function(d){return { x: +d[selectedOptionX], y:+d[selectedOptionY], Location:d.Location } })

    // Update Axes
    x.domain(d3.extent(dataFilter, function(d) { return d.x; })).nice()
    y.domain(d3.extent(dataFilter, function(d) { return d.y; })).nice()
    xAxis.transition().duration(1000).call(d3.axisBottom(x))
    yAxis.transition().duration(1000).call(d3.axisLeft(y))
    
    // Update Labels
    xLabel.text(selectedOptionX)
    yLabel.text(selectedOptionY)
 
    // Update chart
    svg.selectAll(".datadot")
      .data(dataFilter)
      .transition()
      .duration(1000)
      .attr("cx", function (d) { return x(d.x); } )
      .attr("cy", function (d) { return y(d.y); } )
      .style("fill", function (d) { return color(d.Location) } )

  }
  
  d3.select("#xButton").on("change", function(d) {
      update()
  })
  d3.select("#yButton").on("change", function(d) {
      update()
  })

})

</script>

</html>
